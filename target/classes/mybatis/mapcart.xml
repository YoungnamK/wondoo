<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="NsCart">
	<sql id="basic_select">
		select * from cart
	</sql>
	
	<!-- 장바구니 추가 -->
	<insert id="InsertData" parameterType="MyCart">
		insert into 
		cart(
		cart_seq, 
		cart_pro_no, 
		cart_cust_qty, 
		cart_cust_email, 
		cart_price)
		values(
		cart_seq.nextval, 
		#{cart_pro_no}, 
		#{cart_cust_qty}, 
		#{cart_cust_email}, 
		#{cart_price})
	</insert>
	
	<!-- 장바구니 목록 보기  -->
	<select id="SelectAllData" parameterType="String" resultType="MyCart">
		<include refid="basic_select"/>
		where cart_cust_email=#{cart_cust_email}
	</select>
	
	<!-- 장바구니 삭제 하기 -->
	<delete id="DeleteData" parameterType="Integer">
		delete from cart 
		where cart_seq=#{cart_seq}
	</delete>
	
	<!-- 장바구니 상품번호 중복 체크 -->
	<select id="DuplProNoCheck" parameterType="MyCart" resultType="Integer">
		select count(*) from cart
		where cart_pro_no=#{cart_pro_no}
		and cart_cust_email=#{cart_cust_email}
	</select>
	
	<!-- 장바구니 상품번호 중복 체크 후 기존에 들어있던 상품이면 수량 , 가격을 누적한다.-->
	<update id="FirstUpdateQtyPrice" parameterType="MyCart">
		update cart set cart_cust_qty = cart_cust_qty  <![CDATA[+]]> #{cart_cust_qty} , 
		cart_price = cart_price <![CDATA[+]]> #{cart_price}
		where cart_pro_no=#{cart_pro_no} 
		and cart_cust_email=#{cart_cust_email}
	</update>
	
	<!-- 상품 수량 , 가격을 누적하기 전 재고량을 파악해야함 -->
	<select id="SelectByQty" parameterType="MyCart" resultType="Integer">
		select nvl(sum(cart_cust_qty),0) from cart
		where cart_pro_no=#{cart_pro_no} 
		and cart_cust_email=#{cart_cust_email}
	</select>

	<!-- 장바구니 수정 시 장바구니 번호에 따른 bean 객체를 구한다 -->
	<select id="SelectOneData" resultType="MyCart" parameterType="Integer">
		<include refid="basic_select"/>
		where cart_seq=#{cart_seq}
	</select>
	
	<!-- 장바구니 수정 시 신규 수량 & 신규 금액으로 업데이트 처리 -->
	<update id="SecondUpdateQtyPrice" parameterType="java.util.HashMap">
		update cart 
		set cart_cust_qty=#{new_qty}, cart_price=#{new_price}
		where cart_seq=#{cart_seq} and cart_cust_email=#{cust_email}
	</update>
	
	<!-- 장바구니 삭제 하기 -->
	<delete id="DeleteCartData" parameterType="String">
		delete from cart
		where cart_cust_email=#{cart_cust_email}
	</delete>
	
	<update id="UpdateStock">
		update products set pro_stock = pro_stock - #{pro_qty}
		where products_seq = #{products_seq}
	</update>
	
	<insert id="InsertOrder" parameterType="MyProductOrder">
		insert into orders(
		orders_seq, orders_pro_no, orders_zipcode, orders_adr01, orders_adr02, orders_cust_email, orders_request, orders_realtime, 
		orders_qty, orders_amount, orders_phone, remark
		)
		values(orders_seq.nextval, #{orders_pro_no}, #{orders_zipcode}, 
		#{orders_adr01}, #{orders_adr02}, #{orders_cust_email}, #{orders_request}, default, #{orders_qty}, #{orders_amount}, #{orders_phone}, #{remark})
	</insert>

	
</mapper>